--- glibconfig.h.orig	2014-02-06 11:09:52.043779521 +0100
+++ glibconfig.h	2014-02-06 11:44:14.838498832 +0100
@@ -49,6 +49,7 @@
 #define G_GUINT32_FORMAT "u"
 #define G_HAVE_GINT64 1          /* deprecated, always true */
 
+#ifdef __LP64__
 typedef signed long gint64;
 typedef unsigned long guint64;
 
@@ -71,6 +72,30 @@
 #define G_MAXSIZE	G_MAXULONG
 #define G_MINSSIZE	G_MINLONG
 #define G_MAXSSIZE	G_MAXLONG
+#else
+G_GNUC_EXTENSION typedef signed long long gint64;
+G_GNUC_EXTENSION typedef unsigned long long guint64;
+
+#define G_GINT64_CONSTANT(val)	(G_GNUC_EXTENSION (val##LL))
+#define G_GUINT64_CONSTANT(val)	(G_GNUC_EXTENSION (val##ULL))
+#define G_GINT64_MODIFIER "ll"
+#define G_GINT64_FORMAT "lli"
+#define G_GUINT64_FORMAT "llu"
+
+#define GLIB_SIZEOF_VOID_P 4
+#define GLIB_SIZEOF_LONG   4
+#define GLIB_SIZEOF_SIZE_T 4
+
+typedef signed int gssize;
+typedef unsigned int gsize;
+#define G_GSIZE_MODIFIER ""
+#define G_GSSIZE_FORMAT "i"
+#define G_GSIZE_FORMAT "u"
+
+#define G_MAXSIZE	G_MAXUINT
+#define G_MINSSIZE	G_MININT
+#define G_MAXSSIZE	G_MAXINT
+#endif
 
 typedef gint64 goffset;
 #define G_MINOFFSET	G_MININT64
@@ -81,6 +106,7 @@
 #define G_GOFFSET_CONSTANT(val) G_GINT64_CONSTANT(val)
 
 
+#ifdef __LP64__
 #define GPOINTER_TO_INT(p)	((gint)  (glong) (p))
 #define GPOINTER_TO_UINT(p)	((guint) (gulong) (p))
 
@@ -93,6 +119,20 @@
 #define G_GINTPTR_MODIFIER      "l"
 #define G_GINTPTR_FORMAT        "li"
 #define G_GUINTPTR_FORMAT       "lu"
+#else
+#define GPOINTER_TO_INT(p)	((gint)  (gint) (p))
+#define GPOINTER_TO_UINT(p)	((guint) (guint) (p))
+ 
+#define GINT_TO_POINTER(i)	((gpointer) (gint) (i))
+#define GUINT_TO_POINTER(u)	((gpointer) (guint) (u))
+ 
+typedef signed int gintptr;
+typedef unsigned int guintptr;
+ 
+#define G_GINTPTR_MODIFIER      ""
+#define G_GINTPTR_FORMAT        "i"
+#define G_GUINTPTR_FORMAT       "u"
+#endif
 
 #ifdef NeXT /* @#%@! NeXTStep */
 # define g_ATEXIT(proc)	(!atexit (proc))
@@ -172,18 +212,32 @@
 #define GUINT64_TO_LE(val)	((guint64) (val))
 #define GINT64_TO_BE(val)	((gint64) GUINT64_SWAP_LE_BE (val))
 #define GUINT64_TO_BE(val)	(GUINT64_SWAP_LE_BE (val))
+#ifdef __LP64__
 #define GLONG_TO_LE(val)	((glong) GINT64_TO_LE (val))
 #define GULONG_TO_LE(val)	((gulong) GUINT64_TO_LE (val))
 #define GLONG_TO_BE(val)	((glong) GINT64_TO_BE (val))
 #define GULONG_TO_BE(val)	((gulong) GUINT64_TO_BE (val))
+#else
+#define GLONG_TO_LE(val)	((glong) GINT32_TO_LE (val))
+#define GULONG_TO_LE(val)	((gulong) GUINT32_TO_LE (val))
+#define GLONG_TO_BE(val)	((glong) GINT32_TO_BE (val))
+#define GULONG_TO_BE(val)	((gulong) GUINT32_TO_BE (val))
+#endif
 #define GINT_TO_LE(val)		((gint) GINT32_TO_LE (val))
 #define GUINT_TO_LE(val)	((guint) GUINT32_TO_LE (val))
 #define GINT_TO_BE(val)		((gint) GINT32_TO_BE (val))
 #define GUINT_TO_BE(val)	((guint) GUINT32_TO_BE (val))
+#ifdef __LP64__
 #define GSIZE_TO_LE(val)	((gsize) GUINT64_TO_LE (val))
 #define GSSIZE_TO_LE(val)	((gssize) GINT64_TO_LE (val))
 #define GSIZE_TO_BE(val)	((gsize) GUINT64_TO_BE (val))
 #define GSSIZE_TO_BE(val)	((gssize) GINT64_TO_BE (val))
+#else
+#define GLONG_TO_LE(val)	((glong) GINT32_TO_LE (val))
+#define GULONG_TO_LE(val)	((gulong) GUINT32_TO_LE (val))
+#define GLONG_TO_BE(val)	((glong) GINT32_TO_BE (val))
+#define GULONG_TO_BE(val)	((gulong) GUINT32_TO_BE (val))
+#endif
 #define G_BYTE_ORDER G_LITTLE_ENDIAN
 
 #define GLIB_SYSDEF_POLLIN =1

